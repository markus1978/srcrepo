<?xml version="1.0" encoding="ASCII"?>
<java:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:java="http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" name="ScalaOclMetricToolTestclasses">
  <ownedElements name="testclasses">
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.0" name="McCabeBreakTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.0" name="breakTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.0" content="/** &#xA; * DISCUSS: Why does break increase complexity? Should give a McCabe value of 3 = 2 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.0">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.0" text="DISCUSS: Why does break increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.0" text="Should give a McCabe value of 3 = 2 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.0" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.0" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.0">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.0">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.0" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.0">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.0" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.0">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.0" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.0">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.0">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.0" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.0" escapedValue="&quot;a==b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.0">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.0" operator="==">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:BreakStatement" originalCompilationUnit="//@compilationUnits.0"/>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.0" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.0" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.1" name="McCabeTestSwitchCase2">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.1" content="/** &#xA; * Comments should be ignored&#xA; */&#xA;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;static String wochentagsName2(int nummer) {" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;&#x9;switch(nummer) {" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;&#x9;    case 1: return &quot;Montag2&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;&#x9;    case 2: return &quot;Dienstag2&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;&#x9;  }" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;&#x9;return &quot;unknown&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.1" content="//&#x9;}" enclosedByParent="true"/>
      <comments xsi:type="java:BlockComment" originalCompilationUnit="//@compilationUnits.1" content="/*static String wochentagsName2(int nummer) {&#xD;&#xA;&#x9;&#x9;switch(nummer) {&#xD;&#xA;&#x9;&#x9;    case 1: return &quot;Montag2&quot;;&#xD;&#xA;&#x9;&#x9;    case 2: return &quot;Dienstag2&quot;;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;  }&#xD;&#xA;&#x9;&#x9;return &quot;unknown&quot;;&#xD;&#xA;&#x9;}*/" enclosedByParent="true"/>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.1" name="wochentagsName">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.1" content="/** &#xA; * Should give a McCabe value of 6&#xA; * @param nummer&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.1">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.1" text="Should give a McCabe value of 6"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@return"/>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.1">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.1">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Montag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Dienstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Mittwoch&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Donnerstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Freitag&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.1" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.1" name="wochentagsName2">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.1" content="/** &#xA; * Should give a McCabe value of 7&#xA; * @param nummer&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.1">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.1" text="Should give a McCabe value of 7"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@return"/>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.1">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.1">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Montag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Dienstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Mittwoch2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Donnerstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Freitag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.1" tokenValue="6"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;Samstag2&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.1">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.1" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.2" name="McCabeWhileTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.2" name="whileTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.2" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.2">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.2" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.2" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.2">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.2">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.2" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.2">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.2" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.2">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.2">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.2" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.2" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.2" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.2" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.3" name="McCabeContinueTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.3" name="continueTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.3" content="/** &#xA; * DISCUSS: Why does continue or break increase complexity? Should give a McCabe value of 4 = 3 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.3">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="DISCUSS: Why does continue or break increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="Should give a McCabe value of 4 = 3 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.3">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@rightOperand //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.3" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.3">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.3">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.3" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.3" escapedValue="&quot;a==b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.3">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.3" operator=">">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:ContinueStatement" originalCompilationUnit="//@compilationUnits.3"/>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.3">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.3" operator="==">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:BreakStatement" originalCompilationUnit="//@compilationUnits.3"/>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.3" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.3" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.4" name="McCabeReturnTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.4" name="returnTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.4" content="/** &#xA; * DISCUSS: Why does return increase complexity? TODO: what about the last statement restriction? Should give a McCabe value of 3 = 1 binary branch + 1 return + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.4">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.4" text="DISCUSS: Why does return increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.4" text="TODO: what about the last statement restriction?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.4" text="Should give a McCabe value of 3 = 1 binary branch + 1 return + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.4" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.4" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.4">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.4">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.4" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.4">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.4" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.4">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.4" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.4">
              <expression xsi:type="java:PrefixExpression" originalCompilationUnit="//@compilationUnits.4" operator="-">
                <operand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.4" tokenValue="1"/>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.4">
            <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.4" tokenValue="1"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.4" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.4" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.5" name="HalsteadTest">
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.6" name="McCabeForTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.6" name="forTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.6" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.6">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.6" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.6" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.6" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.6">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.6">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.6" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.6">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.6" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@arguments.0/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.6">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.6" name="i" usageInVariableAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@updaters.0/@operand">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.6" tokenValue="0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.6">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.6" operator="&lt;">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.6">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.6">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.6" tokenValue="10"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.6">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.6" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.6" operator="+">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.6" escapedValue="&quot;'b'&quot;"/>
                  <extendedOperands xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.6" escapedValue="&quot;is better than 'a'&quot;"/>
                </arguments>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.6" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.6" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.7" name="McCabeDoWhileTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.7" name="doWhileTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.7" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.7">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.7">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.7">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.8" name="McCabeTestSwitchCase">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="wochentagsName">
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Montag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Dienstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Mittwoch&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Donnerstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Freitag&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.8" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="wochentagsName2">
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Montag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Dienstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Mittwoch2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Donnerstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Freitag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="6"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Samstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="7"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;Sonntag2&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.8" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.9" name="McCabeTestIfElse">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.9" name="ifElseTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.9" content="/** &#xA; * Should give a McCabe value of 3 = 2 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.9">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Should give a McCabe value of 3 = 2 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.9">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              </expression>
              <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;b&lt;a&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </thenStatement>
              <elseStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a>b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </elseStatement>
            </thenStatement>
            <elseStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a==b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </elseStatement>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.10" name="McCabeLogicalOperatorsTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.10" name="logicalOperatorsTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * Tester to find out how to caculated operators like &amp;&amp;, || correctly Should give a McCabe value of 9  = 1 binary branch + &amp;&amp;[what is the same like an if]  + 1 binary branch + ||[what is the same like an if] + 1 while[same like if] + ||[what is the same like an if] + 1 while[same like if] + &amp;&amp;[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.10">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Tester to find out how to caculated operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Should give a McCabe value of 9 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="= 1 binary branch + &amp;&amp;[what is the same like an if] "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 binary branch + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 while[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 while[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.10">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.10">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.10" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@expression/@rightOperand/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.10">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.10" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.10" name="logicalOperatorsTest2">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * Tester to find out how to caculated operators like &amp;&amp;, || correctly Should give a McCabe value of 9  = + 1 for[same like if] + ||[what is the same like an if] + 1 for[same like if] + &amp;&amp;[what is the same like an if] + 1 do[same like if] + ||[what is the same like an if] + 1 do[same like if] + &amp;&amp;[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.10">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Tester to find out how to caculated operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Should give a McCabe value of 9 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="= + 1 for[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 for[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 do[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 do[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.10">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.10">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.10" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@updaters.0/@operand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@updaters.0/@operand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@expression/@rightOperand/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.10">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.10" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&lt;">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="5"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.10">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.10">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&lt;">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="5"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.10">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.10">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.10" name="logicalOperatorsTest3">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * Tester to find out how to calculate operators like &amp;&amp;, || correctly Should give a McCabe value of 5  = + 1 for[same like if]  + 1 &amp;&amp;[what is the same like an if] + 1 &amp;&amp; [what is the same like an if] + 1 ||[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.10">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Tester to find out how to calculate operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Should give a McCabe value of 5 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="= + 1 for[same like if] "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 &amp;&amp; [what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1 ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.10">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.10">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.10" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@leftOperand/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@updaters.0/@operand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.10">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.10" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@leftOperand/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&amp;&amp;">
                <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator=">">
                  <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="4"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
                </rightOperand>
                <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&amp;&amp;">
                  <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&lt;">
                    <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.1/@fragments.0"/>
                    <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="0"/>
                  </rightOperand>
                  <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.10" operator="&lt;">
                    <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="5"/>
                    <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
                  </leftOperand>
                </leftOperand>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.10">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.10">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.10" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
  </ownedElements>
  <ownedElements name="java" proxy="true">
    <ownedPackages name="lang" proxy="true">
      <ownedElements xsi:type="java:ClassDeclaration" name="System" proxy="true" usagesInTypeAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@body/@expression/@expression/@qualifier">
        <bodyDeclarations xsi:type="java:FieldDeclaration" proxy="true">
          <fragments name="out" proxy="true" usageInVariableAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@body/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@body/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@body/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@body/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@body/@expression/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@body/@expression/@expression"/>
        </bodyDeclarations>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="String" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@returnType">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.0"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.2"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.3"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Comparable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.1">
        <typeParameters name="T" proxy="true"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="CharSequence" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.2"/>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="AutoCloseable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.4/@superInterfaces.0"/>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Appendable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superInterfaces.0"/>
    </ownedPackages>
    <ownedPackages name="io" proxy="true">
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Serializable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.0"/>
      <ownedElements xsi:type="java:ClassDeclaration" name="PrintStream" proxy="true">
        <bodyDeclarations xsi:type="java:MethodDeclaration" name="println" proxy="true" usages="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.3/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.4/@body/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.5/@body/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.3/@body/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.4/@body/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.5/@body/@expression //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.2/@body/@expression">
          <parameters name="arg0" proxy="true">
            <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
          </parameters>
        </bodyDeclarations>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.5"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.4"/>
        <superClass type="//@ownedElements.1/@ownedPackages.1/@ownedElements.2"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="FilterOutputStream" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superClass">
        <superClass type="//@ownedElements.1/@ownedPackages.1/@ownedElements.3"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="OutputStream" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.2/@superClass">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.4"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.5"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Closeable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.3/@superInterfaces.0 //@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superInterfaces.1">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.4"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Flushable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.3/@superInterfaces.1"/>
    </ownedPackages>
  </ownedElements>
  <orphanTypes xsi:type="java:PrimitiveTypeInt" name="int" usagesInTypeAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@body/@statements.2/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@parameters.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@parameters.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@body/@statements.1/@type"/>
  <orphanTypes xsi:type="java:PrimitiveTypeLong" name="long"/>
  <orphanTypes xsi:type="java:PrimitiveTypeFloat" name="float"/>
  <orphanTypes xsi:type="java:PrimitiveTypeDouble" name="double"/>
  <orphanTypes xsi:type="java:PrimitiveTypeBoolean" name="boolean"/>
  <orphanTypes xsi:type="java:PrimitiveTypeVoid" name="void" usagesInTypeAccess="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@returnType"/>
  <orphanTypes xsi:type="java:PrimitiveTypeChar" name="char"/>
  <orphanTypes xsi:type="java:PrimitiveTypeShort" name="short"/>
  <orphanTypes xsi:type="java:PrimitiveTypeByte" name="byte"/>
  <compilationUnits name="McCabeBreakTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeBreakTest.java" commentList="//@ownedElements.0/@ownedElements.0/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.0"/>
  <compilationUnits name="McCabeTestSwitchCase2.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestSwitchCase2.java" commentList="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.1/@comments.0 //@ownedElements.0/@ownedElements.1/@comments.1 //@ownedElements.0/@ownedElements.1/@comments.2 //@ownedElements.0/@ownedElements.1/@comments.3 //@ownedElements.0/@ownedElements.1/@comments.4 //@ownedElements.0/@ownedElements.1/@comments.5 //@ownedElements.0/@ownedElements.1/@comments.6 //@ownedElements.0/@ownedElements.1/@comments.7 //@ownedElements.0/@ownedElements.1/@comments.8" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.1"/>
  <compilationUnits name="McCabeWhileTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeWhileTest.java" commentList="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.2"/>
  <compilationUnits name="McCabeContinueTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeContinueTest.java" commentList="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.3"/>
  <compilationUnits name="McCabeReturnTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeReturnTest.java" commentList="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.4"/>
  <compilationUnits name="HalsteadTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\HalsteadTest.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.5"/>
  <compilationUnits name="McCabeForTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeForTest.java" commentList="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.6"/>
  <compilationUnits name="McCabeDoWhileTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeDoWhileTest.java" commentList="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.7"/>
  <compilationUnits name="McCabeTestSwitchCase.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestSwitchCase.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.8"/>
  <compilationUnits name="McCabeTestIfElse.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestIfElse.java" commentList="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.9"/>
  <compilationUnits name="McCabeLogicalOperatorsTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeLogicalOperatorsTest.java" commentList="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.2/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.10"/>
</java:Model>
