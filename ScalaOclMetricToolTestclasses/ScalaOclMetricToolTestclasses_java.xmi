<?xml version="1.0" encoding="ASCII"?>
<java:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:java="http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" name="ScalaOclMetricToolTestclasses">
  <ownedElements name="testclasses">
    <ownedElements xsi:type="java:InterfaceDeclaration" originalCompilationUnit="//@compilationUnits.0" name="CkDitInterfaceLevelTwoWithNoParents" usagesInTypeAccess="//@ownedElements.0/@ownedElements.2/@superInterfaces.0">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.0" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.0" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.0" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.0" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.0" content="//nothing to do here" enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.1" name="McCabeBreakTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.1" name="breakTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.1" content="/** &#xA; * DISCUSS: Why does break increase complexity? Should give a McCabe value of 3 = 2 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.1">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.1" text="DISCUSS: Why does break increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.1" text="Should give a McCabe value of 3 = 2 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.1">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.1">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.1" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.1">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.1" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.1">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.1" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.1">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.1">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.1" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;a==b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.1">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.1" operator="==">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:BreakStatement" originalCompilationUnit="//@compilationUnits.1"/>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.1" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.1" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.2" name="CkDitTest">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.2" content="/** &#xA; * @author Frederik MartickeThis is a testclass for the Depth inheritance tree (DIT) metric from the CK metricssuite. The simulated structure looks as follows: CkDitLevelZeroWithNoParent ^ | | CkDitInterfaceLevelOneWithNoParent &lt;------ CkDitLevelOneWithParent&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^ |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| ----------------------------------------- | CkDitLevelTwoWithTwoParents&#x9;&#x9;&#x9;CkDitInterfaceLevelTwoWithNoParents ^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^ |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| CkDitTest ----------------------------------- Therefore the result should be DIT(CkDitTest) = 3, because  CkDitLevelTwoWithTwoParents -> CkDitLevelOneWithParent -> CkDitLevelZeroWithNoParent is the longest Path inside the inheritance tree.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.2" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="This is a testclass for the Depth inheritance tree (DIT) metric from the CK metricssuite."/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="The simulated structure looks as follows:"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="CkDitLevelZeroWithNoParent"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="CkDitInterfaceLevelOneWithNoParent &lt;------ CkDitLevelOneWithParent&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="-----------------------------------------"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="CkDitLevelTwoWithTwoParents&#x9;&#x9;&#x9;CkDitInterfaceLevelTwoWithNoParents"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="CkDitTest -----------------------------------"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="Therefore the result should be DIT(CkDitTest) = 3, because "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="CkDitLevelTwoWithTwoParents -> CkDitLevelOneWithParent -> CkDitLevelZeroWithNoParent"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="is the longest Path inside the inheritance tree."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.2" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.0"/>
      <superClass type="//@ownedElements.0/@ownedElements.4"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.3" name="McCabeReturnTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.3" name="returnTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.3" content="/** &#xA; * DISCUSS: Why does return increase complexity? TODO: what about the last statement restriction? Should give a McCabe value of 3 = 1 binary branch + 1 return + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.3">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="DISCUSS: Why does return increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="TODO: what about the last statement restriction?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="Should give a McCabe value of 3 = 1 binary branch + 1 return + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.3">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.3" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
              <expression xsi:type="java:PrefixExpression" originalCompilationUnit="//@compilationUnits.3" operator="-">
                <operand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="1"/>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="1"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.3" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.3" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.4" name="CkDitLevelTwoWithTwoParents" usagesInTypeAccess="//@ownedElements.0/@ownedElements.2/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.4" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.4" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.4" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.4" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.4" content="//nothing to do here" enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.20"/>
      <superClass type="//@ownedElements.0/@ownedElements.16"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.5" name="McCabeDoWhileTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.5" name="doWhileTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.5" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.5">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.5" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.5" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.5" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.5">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.5">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.5" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.5">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.5" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.5">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.5" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.5">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.5">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.5" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.5" escapedValue="&quot;a!=b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.5" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.5" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.6" name="CkWmcSecondClass" usagesInTypeAccess="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.7/@body/@statements.0/@expression/@rightOperand/@qualifier">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.6">
        <modifier visibility="public" static="true"/>
        <type type="//@orphanTypes.0"/>
        <fragments originalCompilationUnit="//@compilationUnits.6" name="WmcVariableAccess" usageInVariableAccess="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.7/@body/@statements.0/@expression/@rightOperand">
          <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.6" tokenValue="1"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.6" name="main">
        <modifier visibility="public" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.6">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.6">
            <type type="//@ownedElements.0/@ownedElements.18"/>
            <fragments originalCompilationUnit="//@compilationUnits.6" name="t" usageInVariableAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@body/@statements.1/@expression/@expression">
              <initializer xsi:type="java:ClassInstanceCreation" originalCompilationUnit="//@compilationUnits.6" method="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.9">
                <type type="//@ownedElements.0/@ownedElements.18"/>
              </initializer>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.6">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.6" method="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.3">
              <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.6" name="args">
          <modifier/>
          <type type="//@orphanTypes.9"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.7" name="CkNocChildTwo">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.7" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkNocTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.7" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Part of the structure used for the CkNocTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.7" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superClass type="//@ownedElements.0/@ownedElements.17"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.8" name="McCabeTestIfElse">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="ifElseTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.8" content="/** &#xA; * Should give a McCabe value of 3 = 2 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.8">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="Should give a McCabe value of 3 = 2 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.8" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.8" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.8">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.8" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.8">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.8" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              </expression>
              <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;b&lt;a&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </thenStatement>
              <elseStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;a>b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </elseStatement>
            </thenStatement>
            <elseStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;a==b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </elseStatement>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.8" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.8" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.9" name="McCabeLogicalOperatorsTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.9" name="logicalOperatorsTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.9" content="/** &#xA; * Tester to find out how to caculated operators like &amp;&amp;, || correctly Should give a McCabe value of 9  = 1 binary branch + &amp;&amp;[what is the same like an if]  + 1 binary branch + ||[what is the same like an if] + 1 while[same like if] + ||[what is the same like an if] + 1 while[same like if] + &amp;&amp;[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.9">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Tester to find out how to caculated operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Should give a McCabe value of 9 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="= 1 binary branch + &amp;&amp;[what is the same like an if] "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 binary branch + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 while[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 while[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.9">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@expression/@rightOperand/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.9" name="logicalOperatorsTest2">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.9" content="/** &#xA; * Tester to find out how to caculated operators like &amp;&amp;, || correctly Should give a McCabe value of 9  = + 1 for[same like if] + ||[what is the same like an if] + 1 for[same like if] + &amp;&amp;[what is the same like an if] + 1 do[same like if] + ||[what is the same like an if] + 1 do[same like if] + &amp;&amp;[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.9">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Tester to find out how to caculated operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Should give a McCabe value of 9 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="= + 1 for[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 for[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 do[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 do[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.9">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@updaters.0/@operand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@updaters.0/@operand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@expression/@rightOperand/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="5"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.9">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.9">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="5"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.9">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.9">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.9" name="logicalOperatorsTest3">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.9" content="/** &#xA; * Tester to find out how to calculate operators like &amp;&amp;, || correctly Should give a McCabe value of 5  = + 1 for[same like if]  + 1 &amp;&amp;[what is the same like an if] + 1 &amp;&amp; [what is the same like an if] + 1 ||[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.9">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Tester to find out how to calculate operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Should give a McCabe value of 5 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="= + 1 for[same like if] "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 &amp;&amp; [what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1 ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.9">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@leftOperand/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@updaters.0/@operand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@leftOperand/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&amp;&amp;">
                <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator=">">
                  <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="4"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
                </rightOperand>
                <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&amp;&amp;">
                  <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                    <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.1/@fragments.0"/>
                    <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="0"/>
                  </rightOperand>
                  <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="&lt;">
                    <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="5"/>
                    <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
                  </leftOperand>
                </leftOperand>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.9">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.9">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.9" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.10" name="McCabeTestSwitchCase2">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * Comments should be ignored&#xA; */&#xA;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;static String wochentagsName2(int nummer) {" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;&#x9;switch(nummer) {" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;&#x9;    case 1: return &quot;Montag2&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;&#x9;    case 2: return &quot;Dienstag2&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;&#x9;  }" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;&#x9;return &quot;unknown&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//&#x9;}" enclosedByParent="true"/>
      <comments xsi:type="java:BlockComment" originalCompilationUnit="//@compilationUnits.10" content="/*static String wochentagsName2(int nummer) {&#xD;&#xA;&#x9;&#x9;switch(nummer) {&#xD;&#xA;&#x9;&#x9;    case 1: return &quot;Montag2&quot;;&#xD;&#xA;&#x9;&#x9;    case 2: return &quot;Dienstag2&quot;;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;  }&#xD;&#xA;&#x9;&#x9;return &quot;unknown&quot;;&#xD;&#xA;&#x9;}*/" enclosedByParent="true"/>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.10" name="wochentagsName">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * Should give a McCabe value of 6&#xA; * @param nummer&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.10">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Should give a McCabe value of 6"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@return"/>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.10">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Montag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Dienstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Mittwoch&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Donnerstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Freitag&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.10" name="wochentagsName2">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * Should give a McCabe value of 7&#xA; * @param nummer&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.10">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Should give a McCabe value of 7"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.10" tagName="@return"/>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.10">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Montag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Dienstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Mittwoch2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Donnerstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Freitag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.10" tokenValue="6"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;Samstag2&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.10">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.10" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.10" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.11" name="McCabeWhileTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.11" name="whileTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.11" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.11">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.11" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.11" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.11" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.11">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.11">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.11" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.11">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.11" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.11">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.11" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.11">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.11" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.11" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.11" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.11" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.12" name="McCabeContinueTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.12" name="continueTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.12" content="/** &#xA; * DISCUSS: Why does continue or break increase complexity? Should give a McCabe value of 4 = 3 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.12">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.12" text="DISCUSS: Why does continue or break increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.12" text="Should give a McCabe value of 4 = 3 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.12" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.12" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.12">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.12">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.12" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.12">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.12" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@rightOperand //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.12">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.12" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.12">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.12">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.12" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.12" escapedValue="&quot;a==b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.12">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.12" operator=">">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:ContinueStatement" originalCompilationUnit="//@compilationUnits.12"/>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.12">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.12" operator="==">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:BreakStatement" originalCompilationUnit="//@compilationUnits.12"/>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.12" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.12" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.13" name="CkNocChildOneChildOne">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.13" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkNocTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.13" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="Part of the structure used for the CkNocTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.13" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superClass type="//@ownedElements.0/@ownedElements.15"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.14" name="McCabeForTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.14" name="forTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.14" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.14">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.14" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.14" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.14" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.14">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.14">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.14" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.14">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.14" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@arguments.0/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.14">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.14" name="i" usageInVariableAccess="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@updaters.0/@operand">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.14" tokenValue="0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.14">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.14" operator="&lt;">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.14">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.14">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.14" tokenValue="10"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.14">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.14" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.14" operator="+">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.14" escapedValue="&quot;'b'&quot;"/>
                  <extendedOperands xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.14" escapedValue="&quot;is better than 'a'&quot;"/>
                </arguments>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.14" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.14" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.15" name="CkNocChildOne" usagesInTypeAccess="//@ownedElements.0/@ownedElements.13/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.15" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkNocTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.15" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.15" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.15" text="Part of the structure used for the CkNocTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.15" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superClass type="//@ownedElements.0/@ownedElements.17"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.16" name="CkDitLevelOneWithParent" usagesInTypeAccess="//@ownedElements.0/@ownedElements.4/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.16" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.16" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.16" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.16" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.16" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.20"/>
      <superClass type="//@ownedElements.0/@ownedElements.21"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.17" name="CkNocTest" usagesInTypeAccess="//@ownedElements.0/@ownedElements.7/@superClass //@ownedElements.0/@ownedElements.15/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.17" content="/** &#xA; * @author Frederik MartickeThis is testclass for the Number of children (NOC) metric from the CK metricssuite. The simulated structure looks as follows: CkNocTest ^ | | ------------------------- |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| CkNocChildOne&#x9;&#x9;&#x9;CkNocChildTwo ^ | CkNocChildOneChildOne Therefore the result should be NOC(CkNOCTest) = 2, because  The NOC Value only calculates direct Subtypes. Therefore CkNocChildOneChildOne gets not  included inside the result.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.17" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="This is testclass for the Number of children (NOC) metric from the CK metricssuite."/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="The simulated structure looks as follows:"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="CkNocTest"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="-------------------------"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="CkNocChildOne&#x9;&#x9;&#x9;CkNocChildTwo"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="CkNocChildOneChildOne"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="Therefore the result should be NOC(CkNOCTest) = 2, because "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="The NOC Value only calculates direct Subtypes. Therefore CkNocChildOneChildOne gets not "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="included inside the result."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.17" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.18" name="CkWmcTest" usagesInTypeAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer/@type">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.18" content="/** &#xA; * @author Frederik MartickeTestclass for the Weighted Methods Complexity Metric from the CK-Metricssuite. Should give a WMC-value of 9 = 3 Class methods + 3 instance methods + 3 methods with arguments.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.18" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.18" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.18" text="Testclass for the Weighted Methods Complexity Metric from the CK-Metricssuite."/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.18" text="Should give a WMC-value of 9 = 3 Class methods + 3 instance methods + 3 methods with arguments."/>
        </tags>
      </comments>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestPublicStatic">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//Class methods" prefixOfParent="true"/>
        <modifier visibility="public" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestPrivateStatic" usages="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.2/@body/@statements.0/@expression">
        <modifier visibility="private" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestProtectedStatic">
        <modifier visibility="protected" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.18">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.18" method="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.1"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestPublic" usages="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@body/@statements.1/@expression">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//Instance methods" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestPrivate" usages="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.5/@body/@statements.0/@expression">
        <modifier visibility="private"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestProtected">
        <modifier visibility="protected"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.18">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.18" method="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.4"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestPublic">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//methods with parameters&#x9;" prefixOfParent="true"/>
        <modifier visibility="public" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.18" name="a">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.18" name="b">
          <modifier/>
          <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestPrivate" usages="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.8/@body/@statements.0/@expression">
        <modifier visibility="private"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.18">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.18" operator="+">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@fragments.0">
                <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.0/@ownedElements.6"/>
              </rightOperand>
              <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.18" tokenValue="1"/>
            </expression>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.18" name="i">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.18" name="WmcTestProtected">
        <modifier visibility="protected"/>
        <body originalCompilationUnit="//@compilationUnits.18">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.18">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.18" method="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.7">
              <arguments xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.18" tokenValue="42"/>
            </expression>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.18">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.8/@parameters.0"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.18" name="o" usageInVariableAccess="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.8/@body/@statements.1/@expression">
          <modifier/>
          <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.6"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.6"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:ConstructorDeclaration" name="CkWmcTest" proxy="true" usages="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.19" name="McCabeTestSwitchCase">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.19" name="wochentagsName">
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.19">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.19">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Montag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Dienstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Mittwoch&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Donnerstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Freitag&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.19" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.19" name="wochentagsName2">
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.19">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.19">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Montag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Dienstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Mittwoch2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Donnerstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Freitag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="6"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Samstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="7"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Sonntag2&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.19" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:InterfaceDeclaration" originalCompilationUnit="//@compilationUnits.20" name="CkDitInterfaceLevelOneWithNoParent" usagesInTypeAccess="//@ownedElements.0/@ownedElements.4/@superInterfaces.0 //@ownedElements.0/@ownedElements.16/@superInterfaces.0">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.20" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.20" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.20" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.20" text="Part of the structure used for the CkDitTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.20" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.21" name="CkDitLevelZeroWithNoParent" usagesInTypeAccess="//@ownedElements.0/@ownedElements.16/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.21" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.21" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.21" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.21" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//nothing to do here" enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
  </ownedElements>
  <ownedElements name="java" proxy="true">
    <ownedPackages name="lang" proxy="true">
      <ownedElements xsi:type="java:ClassDeclaration" name="System" proxy="true" usagesInTypeAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@expression/@qualifier">
        <bodyDeclarations xsi:type="java:FieldDeclaration" proxy="true">
          <fragments name="out" proxy="true" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@expression"/>
        </bodyDeclarations>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="String" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0/@parameters.0/@type //@orphanTypes.9/@elementType //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.6/@parameters.1/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@returnType">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.0"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.2"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.3"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Comparable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.1">
        <typeParameters name="T" proxy="true"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="CharSequence" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.2"/>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="AutoCloseable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.4/@superInterfaces.0"/>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Appendable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superInterfaces.0"/>
      <ownedElements xsi:type="java:ClassDeclaration" name="Object" proxy="true" usagesInTypeAccess="//@ownedElements.0/@ownedElements.18/@bodyDeclarations.8/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.8/@parameters.0/@type"/>
    </ownedPackages>
    <ownedPackages name="io" proxy="true">
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Serializable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.0"/>
      <ownedElements xsi:type="java:ClassDeclaration" name="PrintStream" proxy="true">
        <bodyDeclarations xsi:type="java:MethodDeclaration" name="println" proxy="true" usages="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.4/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.5/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.3/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.4/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.5/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.3/@body/@expression">
          <parameters name="arg0" proxy="true">
            <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
          </parameters>
        </bodyDeclarations>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.5"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.4"/>
        <superClass type="//@ownedElements.1/@ownedPackages.1/@ownedElements.2"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="FilterOutputStream" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superClass">
        <superClass type="//@ownedElements.1/@ownedPackages.1/@ownedElements.3"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="OutputStream" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.2/@superClass">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.4"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.5"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Closeable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.3/@superInterfaces.0 //@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superInterfaces.1">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.4"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Flushable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.3/@superInterfaces.1"/>
    </ownedPackages>
  </ownedElements>
  <orphanTypes xsi:type="java:PrimitiveTypeInt" name="int" usagesInTypeAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.6/@bodyDeclarations.0/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@parameters.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@body/@statements.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@parameters.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@parameters.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@body/@statements.1/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@body/@statements.2/@type //@ownedElements.0/@ownedElements.18/@bodyDeclarations.6/@parameters.0/@type //@ownedElements.0/@ownedElements.18/@bodyDeclarations.7/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.7/@parameters.0/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@parameters.0/@type"/>
  <orphanTypes xsi:type="java:PrimitiveTypeLong" name="long"/>
  <orphanTypes xsi:type="java:PrimitiveTypeFloat" name="float"/>
  <orphanTypes xsi:type="java:PrimitiveTypeDouble" name="double"/>
  <orphanTypes xsi:type="java:PrimitiveTypeBoolean" name="boolean"/>
  <orphanTypes xsi:type="java:PrimitiveTypeVoid" name="void" usagesInTypeAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@returnType //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.2/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.3/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.4/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.5/@returnType //@ownedElements.0/@ownedElements.18/@bodyDeclarations.6/@returnType"/>
  <orphanTypes xsi:type="java:PrimitiveTypeChar" name="char"/>
  <orphanTypes xsi:type="java:PrimitiveTypeShort" name="short"/>
  <orphanTypes xsi:type="java:PrimitiveTypeByte" name="byte"/>
  <orphanTypes xsi:type="java:ArrayType" name="java.lang.String[]" usagesInTypeAccess="//@ownedElements.0/@ownedElements.6/@bodyDeclarations.1/@parameters.0/@type" dimensions="1">
    <elementType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
  </orphanTypes>
  <compilationUnits name="CkDitInterfaceLevelTwoWithNoParents.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitInterfaceLevelTwoWithNoParents.java" commentList="//@ownedElements.0/@ownedElements.0/@comments.0 //@ownedElements.0/@ownedElements.0/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.0"/>
  <compilationUnits name="McCabeBreakTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeBreakTest.java" commentList="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.1"/>
  <compilationUnits name="CkDitTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitTest.java" commentList="//@ownedElements.0/@ownedElements.2/@comments.0 //@ownedElements.0/@ownedElements.2/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.2"/>
  <compilationUnits name="McCabeReturnTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeReturnTest.java" commentList="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.3"/>
  <compilationUnits name="CkDitLevelTwoWithTwoParents.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitLevelTwoWithTwoParents.java" commentList="//@ownedElements.0/@ownedElements.4/@comments.0 //@ownedElements.0/@ownedElements.4/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.4"/>
  <compilationUnits name="McCabeDoWhileTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeDoWhileTest.java" commentList="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.5"/>
  <compilationUnits name="CkWmcSecondClass.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkWmcSecondClass.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.6"/>
  <compilationUnits name="CkNocChildTwo.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocChildTwo.java" commentList="//@ownedElements.0/@ownedElements.7/@comments.0 //@ownedElements.0/@ownedElements.7/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.7"/>
  <compilationUnits name="McCabeTestIfElse.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestIfElse.java" commentList="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.8"/>
  <compilationUnits name="McCabeLogicalOperatorsTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeLogicalOperatorsTest.java" commentList="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.2/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.9"/>
  <compilationUnits name="McCabeTestSwitchCase2.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestSwitchCase2.java" commentList="//@ownedElements.0/@ownedElements.10/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.10/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.10/@comments.0 //@ownedElements.0/@ownedElements.10/@comments.1 //@ownedElements.0/@ownedElements.10/@comments.2 //@ownedElements.0/@ownedElements.10/@comments.3 //@ownedElements.0/@ownedElements.10/@comments.4 //@ownedElements.0/@ownedElements.10/@comments.5 //@ownedElements.0/@ownedElements.10/@comments.6 //@ownedElements.0/@ownedElements.10/@comments.7 //@ownedElements.0/@ownedElements.10/@comments.8" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.10"/>
  <compilationUnits name="McCabeWhileTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeWhileTest.java" commentList="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.11"/>
  <compilationUnits name="McCabeContinueTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeContinueTest.java" commentList="//@ownedElements.0/@ownedElements.12/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.12"/>
  <compilationUnits name="CkNocChildOneChildOne.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocChildOneChildOne.java" commentList="//@ownedElements.0/@ownedElements.13/@comments.0 //@ownedElements.0/@ownedElements.13/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.13"/>
  <compilationUnits name="McCabeForTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeForTest.java" commentList="//@ownedElements.0/@ownedElements.14/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.14"/>
  <compilationUnits name="CkNocChildOne.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocChildOne.java" commentList="//@ownedElements.0/@ownedElements.15/@comments.0 //@ownedElements.0/@ownedElements.15/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.15"/>
  <compilationUnits name="CkDitLevelOneWithParent.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitLevelOneWithParent.java" commentList="//@ownedElements.0/@ownedElements.16/@comments.0 //@ownedElements.0/@ownedElements.16/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.16"/>
  <compilationUnits name="CkNocTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocTest.java" commentList="//@ownedElements.0/@ownedElements.17/@comments.0 //@ownedElements.0/@ownedElements.17/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.17"/>
  <compilationUnits name="CkWmcTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkWmcTest.java" commentList="//@ownedElements.0/@ownedElements.18/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.0/@body/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.1/@body/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.3/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.3/@body/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.4/@body/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.6/@comments.0 //@ownedElements.0/@ownedElements.18/@bodyDeclarations.6/@body/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.18"/>
  <compilationUnits name="McCabeTestSwitchCase.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestSwitchCase.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.19"/>
  <compilationUnits name="CkDitInterfaceLevelOneWithNoParent.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitInterfaceLevelOneWithNoParent.java" commentList="//@ownedElements.0/@ownedElements.20/@comments.0 //@ownedElements.0/@ownedElements.20/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.20"/>
  <compilationUnits name="CkDitLevelZeroWithNoParent.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitLevelZeroWithNoParent.java" commentList="//@ownedElements.0/@ownedElements.21/@comments.0 //@ownedElements.0/@ownedElements.21/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.21"/>
</java:Model>
