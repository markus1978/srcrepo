<?xml version="1.0" encoding="ASCII"?>
<java:Model xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:java="http://www.eclipse.org/MoDisco/Java/0.2.incubation/java" name="ScalaOclMetricToolTestclasses">
  <ownedElements name="testclasses">
    <ownedElements xsi:type="java:InterfaceDeclaration" originalCompilationUnit="//@compilationUnits.0" name="CkDitInterfaceLevelTwoWithNoParents" usagesInTypeAccess="//@ownedElements.0/@ownedElements.17/@superInterfaces.0">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.0" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.0" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.0" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.0" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.0" content="//nothing to do here" enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.1" name="McCabeBreakTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.1" name="breakTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.1" content="/** &#xA; * DISCUSS: Why does break increase complexity? Should give a McCabe value of 3 = 2 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.1">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.1" text="DISCUSS: Why does break increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.1" text="Should give a McCabe value of 3 = 2 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.1" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.1">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.1">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.1" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.1">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.1" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.1">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.1" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.1">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.1">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.1" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.1" escapedValue="&quot;a==b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.1">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.1" operator="==">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:BreakStatement" originalCompilationUnit="//@compilationUnits.1"/>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.1" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.1" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.2" name="McCabeTernaryOperatorTest">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.2" content="/** &#xA; * @author Frederik Marticke&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.2" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text=" Frederik Marticke"/>
        </tags>
      </comments>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.2" name="simpleTernaryTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.2" content="/** &#xA; * Should give a McCabe metric of 2 = 1 binary branch + 1&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.2">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="Should give a McCabe metric of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.2" tagName="@return"/>
        </comments>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.2">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.2">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.2" name="i" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@expression/@expression/@leftOperand //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@expression/@thenExpression">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.2">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.2" name="j" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@expression/@expression/@rightOperand //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.2/@expression/@elseExpression">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.2">
            <expression xsi:type="java:ConditionalExpression" originalCompilationUnit="//@compilationUnits.2">
              <elseExpression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </expression>
              <thenExpression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.2" name="complexTernaryTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.2" content="/** &#xA; * should give a McCabe metric of 5 = 4 binary branches + 1&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.2">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.2" text="should give a McCabe metric of 5 = 4 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.2" tagName="@return"/>
        </comments>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.2">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.2">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.2" name="i" usageInVariableAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.1/@thenStatement/@expression/@expression/@leftOperand //@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.1/@thenStatement/@expression/@thenExpression/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.1/@thenStatement/@expression/@thenExpression/@expression/@rightOperand/@expression/@leftOperand/@expression/@leftOperand">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.2">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator=">">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.2">
              <expression xsi:type="java:ConditionalExpression" originalCompilationUnit="//@compilationUnits.2">
                <elseExpression xsi:type="java:BooleanLiteral" originalCompilationUnit="//@compilationUnits.2" value="true"/>
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator=">">
                  <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="10"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenExpression xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.2">
                  <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator="&amp;&amp;">
                    <rightOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.2">
                      <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator="&lt;">
                        <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="200"/>
                        <leftOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.2">
                          <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator="+">
                            <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="10"/>
                            <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
                          </expression>
                        </leftOperand>
                      </expression>
                    </rightOperand>
                    <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.2" operator=">">
                      <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.2" tokenValue="100"/>
                      <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
                    </leftOperand>
                  </expression>
                </thenExpression>
              </expression>
            </thenStatement>
            <elseStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.2">
              <expression xsi:type="java:BooleanLiteral" originalCompilationUnit="//@compilationUnits.2"/>
            </elseStatement>
          </statements>
        </body>
        <returnType type="//@orphanTypes.4"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.3" name="McCabeReturnTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.3" name="returnTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.3" content="/** &#xA; * Should give a McCabe value of 3 = 1 binary branch + 1 return (not the last statement) + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.3">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="Should give a McCabe value of 3 = 1 binary branch + 1 return (not the last statement) + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.3">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.3" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
              <expression xsi:type="java:PrefixExpression" originalCompilationUnit="//@compilationUnits.3" operator="-">
                <operand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="1"/>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="1"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.3" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.3" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.3" name="returnIsLastStatementTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.3" content="/** &#xA; * Should give a McCabe value of 1, because the return is the last statement it does not increase complexity.&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.3">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="Should give a McCabe value of 1, because the return is the last statement it does not increase complexity."/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@return"/>
        </comments>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.3">
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="0"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.3" name="returnIsNotLastStatementTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.3" content="/** &#xA; * Should give a McCabe value of 3 = 1 binary branch, 1 return which is not the last statement + 1&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.3">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.3" text="Should give a McCabe value of 3 = 1 binary branch, 1 return which is not the last statement + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.3" tagName="@return"/>
        </comments>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.3">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.3">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.3" name="i" usageInVariableAccess="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@body/@statements.1/@thenStatement/@statements.0/@expression">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.3">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.3" operator="==">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.3">
              <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              </statements>
            </thenStatement>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.3">
            <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.3" content="//here could go a lot of code..." prefixOfParent="true"/>
            <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.3" tokenValue="1"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.4" name="McCabeDoWhileTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.4" name="doWhileTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.4" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.4">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.4" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.4" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.4" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.4">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.4">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.4" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.4">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.4" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.4">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.4" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.4">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.4">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.4" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.4" escapedValue="&quot;a!=b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.4" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.4" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.5" name="CkWmcSecondClass" usagesInTypeAccess="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.7/@body/@statements.0/@expression/@rightOperand/@qualifier">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.5">
        <modifier visibility="public" static="true"/>
        <type type="//@orphanTypes.0"/>
        <fragments originalCompilationUnit="//@compilationUnits.5" name="WmcVariableAccess" usageInVariableAccess="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.7/@body/@statements.0/@expression/@rightOperand">
          <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.5" tokenValue="1"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.5" name="main">
        <modifier visibility="public" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.5">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.5">
            <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.5" content="//CkWmcSeconds becomes coupled to CkWmcTest by calling its contructor => +1 " prefixOfParent="true"/>
            <type type="//@ownedElements.0/@ownedElements.24"/>
            <fragments originalCompilationUnit="//@compilationUnits.5" name="t" usageInVariableAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.1/@expression/@expression">
              <initializer xsi:type="java:ClassInstanceCreation" originalCompilationUnit="//@compilationUnits.5" method="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.9">
                <type type="//@ownedElements.0/@ownedElements.24"/>
              </initializer>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.5">
            <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.5" content="//the methodcall would be another coupling, but the class was already count, therefore the value stays unchanged" prefixOfParent="true"/>
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.5" method="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.3">
              <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </expression>
          </statements>
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.5">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.5" method="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0">
              <arguments xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.5" tokenValue="1"/>
              <arguments xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.5" tokenValue="3"/>
              <expression xsi:type="java:TypeAccess" type="//@ownedElements.0/@ownedElements.11"/>
            </expression>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.5" name="args">
          <modifier/>
          <type type="//@orphanTypes.9"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.6" name="CkNocChildTwo">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.6" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkNocTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.6" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.6" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.6" text="Part of the structure used for the CkNocTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.6" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superClass type="//@ownedElements.0/@ownedElements.13"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.7" name="McCabeLogicalOperatorsTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.7" name="logicalOperatorsTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.7" content="/** &#xA; * Tester to find out how to caculated operators like &amp;&amp;, || correctly Should give a McCabe value of 9  = 1 binary branch + &amp;&amp;[what is the same like an if]  + 1 binary branch + ||[what is the same like an if] + 1 while[same like if] + ||[what is the same like an if] + 1 while[same like if] + &amp;&amp;[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.7">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Tester to find out how to caculated operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Should give a McCabe value of 9 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="= 1 binary branch + &amp;&amp;[what is the same like an if] "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 binary branch + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 while[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 while[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.7">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@expression/@rightOperand/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </thenStatement>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.7" name="logicalOperatorsTest2">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.7" content="/** &#xA; * Tester to find out how to caculated operators like &amp;&amp;, || correctly Should give a McCabe value of 9  = + 1 for[same like if] + ||[what is the same like an if] + 1 for[same like if] + &amp;&amp;[what is the same like an if] + 1 do[same like if] + ||[what is the same like an if] + 1 do[same like if] + &amp;&amp;[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.7">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Tester to find out how to caculated operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Should give a McCabe value of 9 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="= + 1 for[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 for[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 do[same like if] + ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 do[same like if] + &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.7">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@updaters.0/@operand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@updaters.0/@operand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@expression/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@expression/@rightOperand/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@expression/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@expression/@leftOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&lt;">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="5"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.7">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.7">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&lt;">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="5"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.7">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.7">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&amp;&amp;">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:DoStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.7" name="logicalOperatorsTest3">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.7" content="/** &#xA; * Tester to find out how to calculate operators like &amp;&amp;, || correctly Should give a McCabe value of 5  = + 1 for[same like if]  + 1 &amp;&amp;[what is the same like an if] + 1 &amp;&amp; [what is the same like an if] + 1 ||[what is the same like an if] + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.7">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Tester to find out how to calculate operators like &amp;&amp;, || correctly"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="Should give a McCabe value of 5 "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="= + 1 for[same like if] "/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 &amp;&amp;[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 &amp;&amp; [what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1 ||[what is the same like an if]"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.7" text="+ 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.7" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.7">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@leftOperand/@leftOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@expression/@rightOperand/@leftOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@updaters.0/@operand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.7">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.7" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@expression/@leftOperand/@leftOperand/@rightOperand/@rightOperand //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@expression/@rightOperand/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.7">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="||">
              <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="!=">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.1/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              </rightOperand>
              <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&amp;&amp;">
                <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator=">">
                  <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="4"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
                </rightOperand>
                <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&amp;&amp;">
                  <rightOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&lt;">
                    <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.1/@fragments.0"/>
                    <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="0"/>
                  </rightOperand>
                  <leftOperand xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.7" operator="&lt;">
                    <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="5"/>
                    <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
                  </leftOperand>
                </leftOperand>
              </leftOperand>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.7">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.7">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.7" tokenValue="0"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.7">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.7" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.7" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.7" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.8" name="CkLcomTest">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.8" content="/** &#xA; * ClassVariables = {instanceVar1, instanceVar2, instanceVar3} MethodsInsideClass = {fooPostfixPrefix, ifFoo, ifFooNestedOperators, whileFoo, whileFooNestedOperators, barAssignment, bar2ComplexReturn, fooBar} MfooPostfixPrefix = {instanceVar1}   MifFoo = {instanceVar1}  MifFooNestedOperators = {instanceVar1, instanceVar3, instanceVar4}  MwhileFoo = {instanceVar3, instanceVar5}  MWhileFooNestedOperators = {instanceVar4, instanceVar5}  MbarAssignment = {instanceVar3}  Mbar2ComplexReturn = {instanceVar5}  MfooBar = {instanceVar2} MfooBarField = {instanceVar3} //intersection is empty P = { (MfooPostfixPrefix, MwhileFoo),  (MfooPostfixPrefix, MWhileFooNestedOperators), (MfooPostfixPrefix, MbarAssignment),(fooPostfixPrefix, bar2ComplexReturn), (MfooPostfixPrefix, MfooBar), (MfooPostfixPrefixMfooBarField) (MifFoo, MwhileFoo), (MifFoo, MWhileFooNestedOperators), (MifFoo, MbarAssignment),(ifFoo, bar2ComplexReturn), (MifFoo, MfooBar), (MifFoo, MfooBarField) (MifFooNestedOperators, MfooBar), (ifFooNestedOperators, bar2ComplexReturn) (MwhileFoo, MfooBar) (MWhileFooNestedOperators,MbarAssignment),(MWhileFooNestedOperators,MfooBar), (MWhileFooNestedOperators,MfooBarField) (MbarAssignment, Mbar2ComplexReturn), (MbarAssignment, MfooBar)&#x9; (Mbar2ComplexReturn, MfooBar), (Mbar2ComplexReturn, MfooBarField) (MfooBar, MfooBarField) }  //intersection is not empty Q = {(MfooPostfixPrefix, MifFoo),(MfooPostfixPrefix, MifFooNestedOperators) (MifFoo, MifFooNestedOperators) (MifFooNestedOperators, MwhileFoo),(MifFooNestedOperators, MWhileFooNestedOperators),(MifFooNestedOperators, MbarAssignment), (MifFooNestedOperators, MfooBarField)  (MwhileFoo, MWhileFooNestedOperators), (MwhileFoo, MbarAssignment), (MwhileFoo, Mbar2ComplexReturn), (MwhileFoo, MfooBarField) (MbarAssignment, MfooBarField) (MWhileFooNestedOperators,Mbar2ComplexReturn)  &#x9;&#x9; }  |P| = 23 |Q| = 13 Because of|P| = 23 > 13 = |Q|  => LCOM = |P| - |Q| = 23 - 13 = 10&#xA; * @author Frederik Marticke&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.8">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="ClassVariables = {instanceVar1, instanceVar2, instanceVar3}"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MethodsInsideClass = {fooPostfixPrefix, ifFoo, ifFooNestedOperators, whileFoo, whileFooNestedOperators, barAssignment, bar2ComplexReturn, fooBar}"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MfooPostfixPrefix = {instanceVar1}  "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MifFoo = {instanceVar1} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MifFooNestedOperators = {instanceVar1, instanceVar3, instanceVar4} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MwhileFoo = {instanceVar3, instanceVar5} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MWhileFooNestedOperators = {instanceVar4, instanceVar5} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MbarAssignment = {instanceVar3} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="Mbar2ComplexReturn = {instanceVar5} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MfooBar = {instanceVar2}"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="MfooBarField = {instanceVar3}"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="//intersection is empty"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="P = { (MfooPostfixPrefix, MwhileFoo),  (MfooPostfixPrefix, MWhileFooNestedOperators), (MfooPostfixPrefix, MbarAssignment),(fooPostfixPrefix, bar2ComplexReturn), (MfooPostfixPrefix, MfooBar), (MfooPostfixPrefixMfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MifFoo, MwhileFoo), (MifFoo, MWhileFooNestedOperators), (MifFoo, MbarAssignment),(ifFoo, bar2ComplexReturn), (MifFoo, MfooBar), (MifFoo, MfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MifFooNestedOperators, MfooBar), (ifFooNestedOperators, bar2ComplexReturn)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MwhileFoo, MfooBar)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MWhileFooNestedOperators,MbarAssignment),(MWhileFooNestedOperators,MfooBar), (MWhileFooNestedOperators,MfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MbarAssignment, Mbar2ComplexReturn), (MbarAssignment, MfooBar)&#x9;"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(Mbar2ComplexReturn, MfooBar), (Mbar2ComplexReturn, MfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MfooBar, MfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="//intersection is not empty"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="Q = {(MfooPostfixPrefix, MifFoo),(MfooPostfixPrefix, MifFooNestedOperators)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MifFoo, MifFooNestedOperators)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MifFooNestedOperators, MwhileFoo),(MifFooNestedOperators, MWhileFooNestedOperators),(MifFooNestedOperators, MbarAssignment), (MifFooNestedOperators, MfooBarField) "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MwhileFoo, MWhileFooNestedOperators), (MwhileFoo, MbarAssignment), (MwhileFoo, Mbar2ComplexReturn), (MwhileFoo, MfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MbarAssignment, MfooBarField)"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="(MWhileFooNestedOperators,Mbar2ComplexReturn)  &#x9;&#x9;"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="} "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="|P| = 23"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="|Q| = 13"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="Because of|P| = 23 > 13 = |Q| "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text="=> LCOM = |P| - |Q| = 23 - 13 = 10"/>
        </tags>
        <tags originalCompilationUnit="//@compilationUnits.8" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.8" text=" Frederik Marticke"/>
        </tags>
      </comments>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.8">
        <modifier/>
        <type type="//@orphanTypes.0"/>
        <fragments originalCompilationUnit="//@compilationUnits.8" name="instanceVar1" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.5/@body/@statements.0/@expression/@operand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.5/@body/@statements.1/@expression/@leftHandSide //@ownedElements.0/@ownedElements.8/@bodyDeclarations.5/@body/@statements.1/@expression/@rightHandSide/@leftOperand/@operand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.6/@body/@statements.0/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.6/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.7/@body/@statements.1/@expression/@leftOperand">
          <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.8">
        <modifier/>
        <type type="//@orphanTypes.0"/>
        <fragments originalCompilationUnit="//@compilationUnits.8" name="instanceVar3" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.7/@body/@statements.0/@expression/@leftOperand/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.7/@body/@statements.0/@expression/@rightOperand/@expression/@rightOperand/@expression/@expression/@rightOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@body/@statements.0/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.10/@body/@statements.0/@expression/@leftHandSide //@ownedElements.0/@ownedElements.8/@bodyDeclarations.13/@body/@statements.0/@fragments.0/@initializer">
          <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.8">
        <modifier/>
        <type type="//@orphanTypes.0"/>
        <fragments originalCompilationUnit="//@compilationUnits.8" name="instanceVar4" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.7/@body/@statements.0/@expression/@rightOperand/@expression/@rightOperand/@expression/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.0/@expression/@leftOperand/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.0/@expression/@rightOperand/@expression/@rightOperand/@expression/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.1/@expression/@leftOperand">
          <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.8">
        <modifier/>
        <type type="//@orphanTypes.0"/>
        <fragments originalCompilationUnit="//@compilationUnits.8" name="instanceVar5" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.0/@expression/@rightOperand/@expression/@rightOperand/@expression/@expression/@rightOperand //@ownedElements.0/@ownedElements.8/@bodyDeclarations.11/@body/@statements.0/@expression/@expression/@leftOperand/@expression/@leftOperand">
          <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:FieldDeclaration" originalCompilationUnit="//@compilationUnits.8">
        <modifier/>
        <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
        <fragments originalCompilationUnit="//@compilationUnits.8" name="instanceVar2" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@body/@statements.1/@expression/@leftOperand">
          <initializer xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;tester&quot;"/>
        </fragments>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="fooPostfixPrefix">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 1" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.8">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@fragments.0"/>
            </expression>
          </statements>
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.8">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@fragments.0"/>
              <rightHandSide xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
                <leftOperand xsi:type="java:PrefixExpression" originalCompilationUnit="//@compilationUnits.8">
                  <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@fragments.0"/>
                </leftOperand>
              </rightHandSide>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="ifFoo">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 3" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator=">">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
            </thenStatement>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="ifFooNestedOperators">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 4" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="||">
              <rightOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="&lt;">
                  <rightOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                    <expression xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                      <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
                        <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@fragments.0"/>
                        <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.2/@fragments.0"/>
                      </expression>
                    </expression>
                  </rightOperand>
                  <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
                </expression>
              </rightOperand>
              <leftOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator=">">
                  <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@fragments.0"/>
                </expression>
              </leftOperand>
            </expression>
            <thenStatement xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
            </thenStatement>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="whileFoo">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 2" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator=">">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@fragments.0"/>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;fooWriteLine&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.3/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="whileFooNestedOperators">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 3" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="||">
              <rightOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="&lt;">
                  <rightOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                    <expression xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                      <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
                        <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.3/@fragments.0"/>
                        <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.2/@fragments.0"/>
                      </expression>
                    </expression>
                  </rightOperand>
                  <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
                </expression>
              </rightOperand>
              <leftOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator=">">
                  <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.2/@fragments.0"/>
                </expression>
              </leftOperand>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.8" escapedValue="&quot;fooWriteLine&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
              <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="3"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.2/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="barAssignment" usages="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@body/@statements.0/@fragments.0/@initializer">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 1" prefixOfParent="true"/>
        <modifier visibility="private"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.8">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@fragments.0"/>
              <rightHandSide xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.11"/>
            </expression>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="0"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="bar2ComplexReturn" usages="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.10/@body/@statements.0/@expression/@rightHandSide">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 1" prefixOfParent="true"/>
        <modifier visibility="private"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
              <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
                <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="100"/>
                <leftOperand xsi:type="java:ParenthesizedExpression" originalCompilationUnit="//@compilationUnits.8">
                  <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
                    <rightOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.8" tokenValue="100"/>
                    <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.3/@fragments.0"/>
                  </expression>
                </leftOperand>
              </expression>
            </expression>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="fooBar">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 1" prefixOfParent="true"/>
        <modifier visibility="protected"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.8">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.8" name="baz" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@body/@statements.1/@expression/@rightOperand">
              <initializer xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.8" method="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.10"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.8" operator="+">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@body/@statements.0/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.4/@fragments.0"/>
            </expression>
          </statements>
        </body>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.8" name="fooBarField">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.8" content="//McCabe = 1" prefixOfParent="true"/>
        <modifier visibility="protected"/>
        <body originalCompilationUnit="//@compilationUnits.8">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.8">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.8" name="fieldDec" usageInVariableAccess="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.13/@body/@statements.1/@expression">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@fragments.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.8">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.8/@bodyDeclarations.13/@body/@statements.0/@fragments.0"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.9" name="McCabeWhileTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.9" name="whileTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.9" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.9">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.9" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.9" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.9">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.9">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.9" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.9">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.9" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.9">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.9" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.9" escapedValue="&quot;a!=b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.9" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.10" name="CkNocChildOneChildOne">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.10" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkNocTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.10" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.10" text="Part of the structure used for the CkNocTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.10" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superClass type="//@ownedElements.0/@ownedElements.23"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.11" name="McCabeForTest" usagesInTypeAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.2/@expression/@expression">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.11" name="forTest" usages="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.2/@expression">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.11" content="/** &#xA; * Should give a McCabe value of 2 = 1 binary branch + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.11">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.11" text="Should give a McCabe value of 2 = 1 binary branch + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.11" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.11" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.11">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.11">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.11" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.11">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.11" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@arguments.0/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.11">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.11" name="i" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@initializers.0/@leftHandSide //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@expression/@leftOperand //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@updaters.0/@operand">
              <initializer xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.11" tokenValue="0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:ForStatement" originalCompilationUnit="//@compilationUnits.11">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.11" operator="&lt;">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
            </expression>
            <updaters xsi:type="java:PostfixExpression" originalCompilationUnit="//@compilationUnits.11">
              <operand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
            </updaters>
            <initializers xsi:type="java:Assignment" originalCompilationUnit="//@compilationUnits.11">
              <leftHandSide xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@fragments.0"/>
              <rightHandSide xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.11" tokenValue="10"/>
            </initializers>
            <body xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.11">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.11" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.11" operator="+">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.11" escapedValue="&quot;'b'&quot;"/>
                  <extendedOperands xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.11" escapedValue="&quot;is better than 'a'&quot;"/>
                </arguments>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.11" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.11" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.12" name="CkDitLevelOneWithParent" usagesInTypeAccess="//@ownedElements.0/@ownedElements.18/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.12" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.12" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.12" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.12" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.12" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.25"/>
      <superClass type="//@ownedElements.0/@ownedElements.16"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.13" name="CkNocTest" usagesInTypeAccess="//@ownedElements.0/@ownedElements.23/@superClass //@ownedElements.0/@ownedElements.6/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.13" content="/** &#xA; * @author Frederik MartickeThis is testclass for the Number of children (NOC) metric from the CK metricssuite. The simulated structure looks as follows: CkNocTest ^ | | ------------------------- |&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| CkNocChildOne&#x9;&#x9;&#x9;CkNocChildTwo ^ | CkNocChildOneChildOne Therefore the result should be NOC(CkNOCTest) = 2, because  The NOC Value only calculates direct Subtypes. Therefore CkNocChildOneChildOne gets not  included inside the result.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.13" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="This is testclass for the Number of children (NOC) metric from the CK metricssuite."/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="The simulated structure looks as follows:"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="CkNocTest"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="-------------------------"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="CkNocChildOne&#x9;&#x9;&#x9;CkNocChildTwo"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="CkNocChildOneChildOne"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="Therefore the result should be NOC(CkNOCTest) = 2, because "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="The NOC Value only calculates direct Subtypes. Therefore CkNocChildOneChildOne gets not "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.13" text="included inside the result."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.13" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:InterfaceDeclaration" originalCompilationUnit="//@compilationUnits.14" name="CkNocInterfaceTest" usagesInTypeAccess="//@ownedElements.0/@ownedElements.17/@superInterfaces.2">
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.15" name="McCabeTestSwitchCase">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.15" name="wochentagsName">
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.15">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.15">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.15/@bodyDeclarations.0/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Montag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Dienstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Mittwoch&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Donnerstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Freitag&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.15" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.15/@bodyDeclarations.0/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.15" name="wochentagsName2">
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.15">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.15">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.15/@bodyDeclarations.1/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Montag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Dienstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Mittwoch2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Donnerstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Freitag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="6"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Samstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.15" tokenValue="7"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;Sonntag2&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.15">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.15" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.15" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.15/@bodyDeclarations.1/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.16" name="CkDitLevelZeroWithNoParent" usagesInTypeAccess="//@ownedElements.0/@ownedElements.12/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.16" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.16" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.16" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.16" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.16" content="//nothing to do here" enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.17" name="CkDitTest">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.17" content="/** &#xA; * @author Frederik MartickeThis is a testclass for the Depth inheritance tree (DIT) metric from the CK metricssuite. The simulated structure looks as follows: CkDitLevelZeroWithNoParent ^ | | CkDitInterfaceLevelOneWithNoParent &lt;------ CkDitLevelOneWithParent&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; ^&#x9;&#x9;^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^ |&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| |&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| |&#x9;&#x9;----------------------------------------- |&#x9;&#x9;| |&#x9;CkDitLevelTwoWithTwoParents&#x9;&#x9;&#x9;CkDitInterfaceLevelTwoWithNoParents |&#x9;&#x9;^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^ |&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| |&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;| -----CkDitTest ----------------------------------- Therefore the result should be DIT(CkDitTest) = 3, because  CkDitLevelTwoWithTwoParents -> CkDitLevelOneWithParent -> CkDitLevelZeroWithNoParent is the longest Path inside the inheritance tree.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.17" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="This is a testclass for the Depth inheritance tree (DIT) metric from the CK metricssuite."/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="The simulated structure looks as follows:"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="CkDitLevelZeroWithNoParent"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="CkDitInterfaceLevelOneWithNoParent &lt;------ CkDitLevelOneWithParent&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="^&#x9;&#x9;^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;-----------------------------------------"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;CkDitLevelTwoWithTwoParents&#x9;&#x9;&#x9;CkDitInterfaceLevelTwoWithNoParents"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;^&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;^"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="|&#x9;&#x9;|&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;|"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="-----CkDitTest -----------------------------------"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="Therefore the result should be DIT(CkDitTest) = 3, because "/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="CkDitLevelTwoWithTwoParents -> CkDitLevelOneWithParent -> CkDitLevelZeroWithNoParent"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.17" text="is the longest Path inside the inheritance tree."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.17" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.0"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.25"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.14"/>
      <superClass type="//@ownedElements.0/@ownedElements.18"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.18" name="CkDitLevelTwoWithTwoParents" usagesInTypeAccess="//@ownedElements.0/@ownedElements.17/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.18" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.18" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.18" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.18" text="Part of the structure used for the CkDitTest."/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.18" content="//nothing to do here" enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superInterfaces type="//@ownedElements.0/@ownedElements.25"/>
      <superClass type="//@ownedElements.0/@ownedElements.12"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.19" name="McCabeExceptionsTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.19" name="tryCatchTest">
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.19">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.19">
            <type type="//@orphanTypes.9"/>
            <fragments originalCompilationUnit="//@compilationUnits.19" name="test" usageInVariableAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@body/@statements.0/@fragments.0/@initializer/@array">
              <initializer xsi:type="java:ArrayCreation" originalCompilationUnit="//@compilationUnits.19">
                <dimensions xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="2"/>
                <type type="//@orphanTypes.9"/>
              </initializer>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:TryStatement" originalCompilationUnit="//@compilationUnits.19">
            <body originalCompilationUnit="//@compilationUnits.19">
              <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.19">
                <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
                <fragments originalCompilationUnit="//@compilationUnits.19" name="foo" usageInVariableAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@body/@statements.1/@expression">
                  <initializer xsi:type="java:ArrayAccess" originalCompilationUnit="//@compilationUnits.19">
                    <array xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                    <index xsi:type="java:PrefixExpression" originalCompilationUnit="//@compilationUnits.19" operator="-">
                      <operand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="1"/>
                    </index>
                  </initializer>
                </fragments>
                <modifier/>
              </statements>
              <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@body/@statements.0/@fragments.0"/>
              </statements>
            </body>
            <catchClauses originalCompilationUnit="//@compilationUnits.19">
              <exception originalCompilationUnit="//@compilationUnits.19" name="e">
                <modifier/>
                <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.6"/>
              </exception>
              <body originalCompilationUnit="//@compilationUnits.19">
                <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.19">
                  <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.19" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                    <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Exception&quot;"/>
                    <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                      <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                    </expression>
                  </expression>
                </statements>
              </body>
            </catchClauses>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;bar&quot;"/>
          </statements>
        </body>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.19" name="throwsTest">
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.19">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.19">
            <type type="//@orphanTypes.9"/>
            <fragments originalCompilationUnit="//@compilationUnits.19" name="test" usageInVariableAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@body/@statements.0/@fragments.0/@initializer/@array">
              <initializer xsi:type="java:ArrayCreation" originalCompilationUnit="//@compilationUnits.19">
                <dimensions xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="2"/>
                <type type="//@orphanTypes.9"/>
              </initializer>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:TryStatement" originalCompilationUnit="//@compilationUnits.19">
            <body originalCompilationUnit="//@compilationUnits.19">
              <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.19">
                <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
                <fragments originalCompilationUnit="//@compilationUnits.19" name="foo" usageInVariableAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@body/@statements.1/@expression">
                  <initializer xsi:type="java:ArrayAccess" originalCompilationUnit="//@compilationUnits.19">
                    <array xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.0/@fragments.0"/>
                    <index xsi:type="java:PrefixExpression" originalCompilationUnit="//@compilationUnits.19" operator="-">
                      <operand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.19" tokenValue="1"/>
                    </index>
                  </initializer>
                </fragments>
                <modifier/>
              </statements>
              <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.19">
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@body/@statements.0/@fragments.0"/>
              </statements>
            </body>
            <catchClauses originalCompilationUnit="//@compilationUnits.19">
              <exception originalCompilationUnit="//@compilationUnits.19" name="e">
                <modifier/>
                <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.6"/>
              </exception>
              <body originalCompilationUnit="//@compilationUnits.19">
                <statements xsi:type="java:ThrowStatement" originalCompilationUnit="//@compilationUnits.19">
                  <expression xsi:type="java:ClassInstanceCreation" originalCompilationUnit="//@compilationUnits.19" method="//@ownedElements.1/@ownedPackages.0/@ownedElements.8/@bodyDeclarations.0">
                    <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.19" escapedValue="&quot;Error found&quot;"/>
                    <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.8"/>
                  </expression>
                </statements>
              </body>
            </catchClauses>
          </statements>
        </body>
        <thrownExceptions type="//@ownedElements.1/@ownedPackages.0/@ownedElements.8"/>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.20" name="McCabeTestIfElse">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.20" name="ifElseTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.20" content="/** &#xA; * Should give a McCabe value of 3 = 2 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.20">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.20" text="Should give a McCabe value of 3 = 2 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.20" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.20" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.20">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.20">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.20" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.20">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.20" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.20">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.20" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <thenStatement xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.20">
              <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.20" operator="&lt;">
                <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              </expression>
              <thenStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.20">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.20" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.20" escapedValue="&quot;b&lt;a&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </thenStatement>
              <elseStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.20">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.20" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.20" escapedValue="&quot;a>b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </elseStatement>
            </thenStatement>
            <elseStatement xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.20">
              <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.20" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.20" escapedValue="&quot;a==b&quot;"/>
                <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                  <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                </expression>
              </expression>
            </elseStatement>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.20" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.20" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.21" name="McCabeTestSwitchCase2">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.21" content="/** &#xA; * Comments should be ignored&#xA; */&#xA;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;static String wochentagsName2(int nummer) {" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;&#x9;switch(nummer) {" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;&#x9;    case 1: return &quot;Montag2&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;&#x9;    case 2: return &quot;Dienstag2&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;&#x9;  }" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;&#x9;return &quot;unknown&quot;;" enclosedByParent="true"/>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.21" content="//&#x9;}" enclosedByParent="true"/>
      <comments xsi:type="java:BlockComment" originalCompilationUnit="//@compilationUnits.21" content="/*static String wochentagsName2(int nummer) {&#xD;&#xA;&#x9;&#x9;switch(nummer) {&#xD;&#xA;&#x9;&#x9;    case 1: return &quot;Montag2&quot;;&#xD;&#xA;&#x9;&#x9;    case 2: return &quot;Dienstag2&quot;;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;  }&#xD;&#xA;&#x9;&#x9;return &quot;unknown&quot;;&#xD;&#xA;&#x9;}*/" enclosedByParent="true"/>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.21" name="wochentagsName">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.21" content="/** &#xA; * Should give a McCabe value of 6&#xA; * @param nummer&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.21">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.21" text="Should give a McCabe value of 6"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.21" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.21" tagName="@return"/>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.21">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.21">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Montag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Dienstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Mittwoch&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Donnerstag&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Freitag&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.21" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.21" name="wochentagsName2">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.21" content="/** &#xA; * Should give a McCabe value of 7&#xA; * @param nummer&#xA; * @return&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.21">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.21" text="Should give a McCabe value of 7"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.21" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.21" tagName="@return"/>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.21">
          <statements xsi:type="java:SwitchStatement" originalCompilationUnit="//@compilationUnits.21">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@parameters.0"/>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="1"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Montag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="2"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Dienstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="3"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Mittwoch2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="4"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Donnerstag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="5"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Freitag2&quot;"/>
            </statements>
            <statements xsi:type="java:SwitchCase" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.21" tokenValue="6"/>
            </statements>
            <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
              <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;Samstag2&quot;"/>
            </statements>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.21">
            <expression xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.21" escapedValue="&quot;unknown&quot;"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.21" name="nummer" usageInVariableAccess="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@body/@statements.0/@expression">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.22" name="McCabeContinueTest">
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.22" name="continueTest">
        <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.22" content="/** &#xA; * DISCUSS: Why does continue or break increase complexity? Should give a McCabe value of 4 = 3 binary branches + 1&#xA; * @param pA&#xA; * @param pB&#xA; */&#xA;" prefixOfParent="true">
          <tags originalCompilationUnit="//@compilationUnits.22">
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.22" text="DISCUSS: Why does continue or break increase complexity?"/>
            <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.22" text="Should give a McCabe value of 4 = 3 binary branches + 1"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.22" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@parameters.0"/>
          </tags>
          <tags originalCompilationUnit="//@compilationUnits.22" tagName="@param">
            <fragments xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@parameters.1"/>
          </tags>
        </comments>
        <modifier static="true"/>
        <body originalCompilationUnit="//@compilationUnits.22">
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.22">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.22" name="a" usageInVariableAccess="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@expression/@leftOperand //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@leftOperand //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.2/@expression/@leftOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@parameters.0"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:VariableDeclarationStatement" originalCompilationUnit="//@compilationUnits.22">
            <type type="//@orphanTypes.0"/>
            <fragments originalCompilationUnit="//@compilationUnits.22" name="b" usageInVariableAccess="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@expression/@rightOperand //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.1/@expression/@rightOperand //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.2/@expression/@rightOperand">
              <initializer xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@parameters.1"/>
            </fragments>
            <modifier/>
          </statements>
          <statements xsi:type="java:WhileStatement" originalCompilationUnit="//@compilationUnits.22">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.22" operator="!=">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
              <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
            </expression>
            <body xsi:type="java:Block" originalCompilationUnit="//@compilationUnits.22">
              <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.22">
                <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.22" method="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0">
                  <arguments xsi:type="java:StringLiteral" originalCompilationUnit="//@compilationUnits.22" escapedValue="&quot;a==b&quot;"/>
                  <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.1/@ownedPackages.0/@ownedElements.0/@bodyDeclarations.0/@fragments.0">
                    <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.1/@ownedPackages.0/@ownedElements.0"/>
                  </expression>
                </expression>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.22">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.22" operator=">">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:ContinueStatement" originalCompilationUnit="//@compilationUnits.22"/>
              </statements>
              <statements xsi:type="java:IfStatement" originalCompilationUnit="//@compilationUnits.22">
                <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.22" operator="==">
                  <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.1/@fragments.0"/>
                  <leftOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.0/@fragments.0"/>
                </expression>
                <thenStatement xsi:type="java:BreakStatement" originalCompilationUnit="//@compilationUnits.22"/>
              </statements>
            </body>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.22" name="pA" usageInVariableAccess="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@comments.0/@tags.1/@fragments.0 //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.22" name="pB" usageInVariableAccess="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@comments.0/@tags.2/@fragments.0 //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.1/@fragments.0/@initializer">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.23" name="CkNocChildOne" usagesInTypeAccess="//@ownedElements.0/@ownedElements.10/@superClass">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.23" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkNocTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.23" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.23" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.23" text="Part of the structure used for the CkNocTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.23" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
      <superClass type="//@ownedElements.0/@ownedElements.13"/>
    </ownedElements>
    <ownedElements xsi:type="java:ClassDeclaration" originalCompilationUnit="//@compilationUnits.24" name="CkWmcTest" usagesInTypeAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer/@type">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.24" content="/** &#xA; * @author Frederik MartickeTestclass for the Weighted Methods Complexity Metric from the CK-Metricssuite. Should give a WMC-value of 9 = 3 Class methods + 3 instance methods + 3 methods with arguments.&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.24" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.24" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.24" text="Testclass for the Weighted Methods Complexity Metric from the CK-Metricssuite."/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.24" text="Should give a WMC-value of 9 = 3 Class methods + 3 instance methods + 3 methods with arguments."/>
        </tags>
      </comments>
      <modifier visibility="public"/>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestPublicStatic">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//Class methods" prefixOfParent="true"/>
        <modifier visibility="public" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestPrivateStatic" usages="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.2/@body/@statements.0/@expression">
        <modifier visibility="private" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestProtectedStatic">
        <modifier visibility="protected" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.24">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.24" method="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.1"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestPublic" usages="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.1/@expression">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//Instance methods" prefixOfParent="true"/>
        <modifier visibility="public"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestPrivate" usages="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.5/@body/@statements.0/@expression">
        <modifier visibility="private"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestProtected">
        <modifier visibility="protected"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.24">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.24" method="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.4"/>
          </statements>
        </body>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestPublic">
        <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//methods with parameters&#x9;" prefixOfParent="true"/>
        <modifier visibility="public" static="true"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.24" content="//nothing to do here" enclosedByParent="true"/>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.24" name="a">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <parameters originalCompilationUnit="//@compilationUnits.24" name="b">
          <modifier/>
          <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
        </parameters>
        <returnType type="//@orphanTypes.5"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestPrivate" usages="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.8/@body/@statements.0/@expression">
        <modifier visibility="private"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.24">
            <expression xsi:type="java:InfixExpression" originalCompilationUnit="//@compilationUnits.24" operator="+">
              <rightOperand xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@fragments.0">
                <qualifier xsi:type="java:TypeAccess" type="//@ownedElements.0/@ownedElements.5"/>
              </rightOperand>
              <leftOperand xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.24" tokenValue="1"/>
            </expression>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.24" name="i">
          <modifier/>
          <type type="//@orphanTypes.0"/>
        </parameters>
        <returnType type="//@orphanTypes.0"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:MethodDeclaration" originalCompilationUnit="//@compilationUnits.24" name="WmcTestProtected">
        <modifier visibility="protected"/>
        <body originalCompilationUnit="//@compilationUnits.24">
          <statements xsi:type="java:ExpressionStatement" originalCompilationUnit="//@compilationUnits.24">
            <expression xsi:type="java:MethodInvocation" originalCompilationUnit="//@compilationUnits.24" method="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.7">
              <arguments xsi:type="java:NumberLiteral" originalCompilationUnit="//@compilationUnits.24" tokenValue="42"/>
            </expression>
          </statements>
          <statements xsi:type="java:ReturnStatement" originalCompilationUnit="//@compilationUnits.24">
            <expression xsi:type="java:SingleVariableAccess" variable="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.8/@parameters.0"/>
          </statements>
        </body>
        <parameters originalCompilationUnit="//@compilationUnits.24" name="o" usageInVariableAccess="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.8/@body/@statements.1/@expression">
          <modifier/>
          <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.10"/>
        </parameters>
        <returnType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.10"/>
      </bodyDeclarations>
      <bodyDeclarations xsi:type="java:ConstructorDeclaration" name="CkWmcTest" proxy="true" usages="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer"/>
    </ownedElements>
    <ownedElements xsi:type="java:InterfaceDeclaration" originalCompilationUnit="//@compilationUnits.25" name="CkDitInterfaceLevelOneWithNoParent" usagesInTypeAccess="//@ownedElements.0/@ownedElements.12/@superInterfaces.0 //@ownedElements.0/@ownedElements.17/@superInterfaces.1 //@ownedElements.0/@ownedElements.18/@superInterfaces.0">
      <comments xsi:type="java:Javadoc" originalCompilationUnit="//@compilationUnits.25" content="/** &#xA; * @author Frederik MartickePart of the structure used for the CkDitTest&#xA; */&#xA;" prefixOfParent="true">
        <tags originalCompilationUnit="//@compilationUnits.25" tagName="@author">
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.25" text=" Frederik Marticke"/>
          <fragments xsi:type="java:TextElement" originalCompilationUnit="//@compilationUnits.25" text="Part of the structure used for the CkDitTest"/>
        </tags>
      </comments>
      <comments xsi:type="java:LineComment" originalCompilationUnit="//@compilationUnits.25" content="//nothing to do here." enclosedByParent="true"/>
      <modifier visibility="public"/>
    </ownedElements>
  </ownedElements>
  <ownedElements name="java" proxy="true">
    <ownedPackages name="lang" proxy="true">
      <ownedElements xsi:type="java:ClassDeclaration" name="System" proxy="true" usagesInTypeAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@body/@statements.0/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.0/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@catchClauses.0/@body/@statements.0/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression/@expression/@qualifier //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression/@qualifier">
        <bodyDeclarations xsi:type="java:FieldDeclaration" proxy="true">
          <fragments name="out" proxy="true" usageInVariableAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@body/@expression/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@body/@statements.0/@body/@expression/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.0/@body/@expression/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@body/@expression/@expression //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@body/@expression/@expression //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@catchClauses.0/@body/@statements.0/@expression/@expression //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression/@expression //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression/@expression //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression/@expression //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression/@expression"/>
        </bodyDeclarations>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="String" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@bodyDeclarations.0/@parameters.0/@type //@orphanTypes.9/@elementType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.4/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@returnType //@ownedElements.0/@ownedElements.15/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.15/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@body/@statements.0/@type //@ownedElements.1/@ownedPackages.0/@ownedElements.8/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.6/@parameters.1/@type">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.0"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.2"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.3"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Comparable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.1">
        <typeParameters name="T" proxy="true"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="CharSequence" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.2"/>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="AutoCloseable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.4/@superInterfaces.0"/>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Appendable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superInterfaces.0"/>
      <ownedElements xsi:type="java:ClassDeclaration" name="IndexOutOfBoundsException" proxy="true" usagesInTypeAccess="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@catchClauses.0/@exception/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@catchClauses.0/@exception/@type">
        <superClass type="//@ownedElements.1/@ownedPackages.0/@ownedElements.7"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="RuntimeException" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.6/@superClass">
        <superClass type="//@ownedElements.1/@ownedPackages.0/@ownedElements.8"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="Exception" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.7/@superClass //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@thrownExceptions.0 //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@catchClauses.0/@body/@statements.0/@expression/@type">
        <bodyDeclarations xsi:type="java:ConstructorDeclaration" name="Exception" proxy="true" usages="//@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.1/@catchClauses.0/@body/@statements.0/@expression">
          <parameters name="arg0" proxy="true">
            <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
          </parameters>
        </bodyDeclarations>
        <superClass type="//@ownedElements.1/@ownedPackages.0/@ownedElements.9"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="Throwable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.8/@superClass">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.0"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="Object" proxy="true" usagesInTypeAccess="//@ownedElements.0/@ownedElements.24/@bodyDeclarations.8/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.8/@parameters.0/@type"/>
    </ownedPackages>
    <ownedPackages name="io" proxy="true">
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Serializable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.0/@ownedElements.1/@superInterfaces.0 //@ownedElements.1/@ownedPackages.0/@ownedElements.9/@superInterfaces.0"/>
      <ownedElements xsi:type="java:ClassDeclaration" name="PrintStream" proxy="true">
        <bodyDeclarations xsi:type="java:MethodDeclaration" name="println" proxy="true" usages="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.3/@thenStatement/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.4/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.5/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.3/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.4/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.5/@body/@expression //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@body/@statements.0/@body/@expression //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@body/@statements.0/@body/@expression //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.2/@body/@expression //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.3/@body/@expression //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.1/@catchClauses.0/@body/@statements.0/@expression //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@thenStatement/@expression //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@thenStatement/@elseStatement/@expression //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.2/@elseStatement/@expression //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.2/@body/@statements.0/@expression">
          <parameters name="arg0" proxy="true">
            <type type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
          </parameters>
        </bodyDeclarations>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.5"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.4"/>
        <superClass type="//@ownedElements.1/@ownedPackages.1/@ownedElements.2"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="FilterOutputStream" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superClass">
        <superClass type="//@ownedElements.1/@ownedPackages.1/@ownedElements.3"/>
      </ownedElements>
      <ownedElements xsi:type="java:ClassDeclaration" name="OutputStream" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.2/@superClass">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.4"/>
        <superInterfaces type="//@ownedElements.1/@ownedPackages.1/@ownedElements.5"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Closeable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.3/@superInterfaces.0 //@ownedElements.1/@ownedPackages.1/@ownedElements.1/@superInterfaces.1">
        <superInterfaces type="//@ownedElements.1/@ownedPackages.0/@ownedElements.4"/>
      </ownedElements>
      <ownedElements xsi:type="java:InterfaceDeclaration" name="Flushable" proxy="true" usagesInTypeAccess="//@ownedElements.1/@ownedPackages.1/@ownedElements.3/@superInterfaces.1"/>
    </ownedPackages>
  </ownedElements>
  <orphanTypes xsi:type="java:PrimitiveTypeInt" name="int" usagesInTypeAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.3/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@returnType //@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@body/@statements.0/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.5/@bodyDeclarations.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@parameters.1/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@body/@statements.1/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@parameters.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@parameters.1/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.0/@type //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@body/@statements.1/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.0/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.1/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.2/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.3/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.6/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.7/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.10/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.11/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@body/@statements.0/@type //@ownedElements.0/@ownedElements.8/@bodyDeclarations.13/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.13/@body/@statements.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@body/@statements.2/@type //@ownedElements.0/@ownedElements.15/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.15/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@parameters.0/@type //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@parameters.1/@type //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@body/@statements.1/@type //@ownedElements.0/@ownedElements.24/@bodyDeclarations.6/@parameters.0/@type //@ownedElements.0/@ownedElements.24/@bodyDeclarations.7/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.7/@parameters.0/@type"/>
  <orphanTypes xsi:type="java:PrimitiveTypeLong" name="long"/>
  <orphanTypes xsi:type="java:PrimitiveTypeFloat" name="float"/>
  <orphanTypes xsi:type="java:PrimitiveTypeDouble" name="double"/>
  <orphanTypes xsi:type="java:PrimitiveTypeBoolean" name="boolean" usagesInTypeAccess="//@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@returnType"/>
  <orphanTypes xsi:type="java:PrimitiveTypeVoid" name="void" usagesInTypeAccess="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@returnType //@ownedElements.0/@ownedElements.8/@bodyDeclarations.5/@returnType //@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.0/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.1/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.2/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.3/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.4/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.5/@returnType //@ownedElements.0/@ownedElements.24/@bodyDeclarations.6/@returnType"/>
  <orphanTypes xsi:type="java:PrimitiveTypeChar" name="char"/>
  <orphanTypes xsi:type="java:PrimitiveTypeShort" name="short"/>
  <orphanTypes xsi:type="java:PrimitiveTypeByte" name="byte"/>
  <orphanTypes xsi:type="java:ArrayType" name="java.lang.String[]" usagesInTypeAccess="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@parameters.0/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.0/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.0/@body/@statements.0/@fragments.0/@initializer/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.0/@type //@ownedElements.0/@ownedElements.19/@bodyDeclarations.1/@body/@statements.0/@fragments.0/@initializer/@type" dimensions="1">
    <elementType type="//@ownedElements.1/@ownedPackages.0/@ownedElements.1"/>
  </orphanTypes>
  <compilationUnits name="CkDitInterfaceLevelTwoWithNoParents.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitInterfaceLevelTwoWithNoParents.java" commentList="//@ownedElements.0/@ownedElements.0/@comments.0 //@ownedElements.0/@ownedElements.0/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.0"/>
  <compilationUnits name="McCabeBreakTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeBreakTest.java" commentList="//@ownedElements.0/@ownedElements.1/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.1"/>
  <compilationUnits name="McCabeTernaryOperatorTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTernaryOperatorTest.java" commentList="//@ownedElements.0/@ownedElements.2/@comments.0 //@ownedElements.0/@ownedElements.2/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.2/@bodyDeclarations.1/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.2"/>
  <compilationUnits name="McCabeReturnTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeReturnTest.java" commentList="//@ownedElements.0/@ownedElements.3/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@comments.0 //@ownedElements.0/@ownedElements.3/@bodyDeclarations.2/@body/@statements.2/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.3"/>
  <compilationUnits name="McCabeDoWhileTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeDoWhileTest.java" commentList="//@ownedElements.0/@ownedElements.4/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.4"/>
  <compilationUnits name="CkWmcSecondClass.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkWmcSecondClass.java" commentList="//@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.0/@comments.0 //@ownedElements.0/@ownedElements.5/@bodyDeclarations.1/@body/@statements.1/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.5"/>
  <compilationUnits name="CkNocChildTwo.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocChildTwo.java" commentList="//@ownedElements.0/@ownedElements.6/@comments.0 //@ownedElements.0/@ownedElements.6/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.6"/>
  <compilationUnits name="McCabeLogicalOperatorsTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeLogicalOperatorsTest.java" commentList="//@ownedElements.0/@ownedElements.7/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.7/@bodyDeclarations.2/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.7"/>
  <compilationUnits name="CkLcomTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkLcomTest.java" commentList="//@ownedElements.0/@ownedElements.8/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.5/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.6/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.7/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.8/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.9/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.10/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.11/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.12/@comments.0 //@ownedElements.0/@ownedElements.8/@bodyDeclarations.13/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.8"/>
  <compilationUnits name="McCabeWhileTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeWhileTest.java" commentList="//@ownedElements.0/@ownedElements.9/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.9"/>
  <compilationUnits name="CkNocChildOneChildOne.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocChildOneChildOne.java" commentList="//@ownedElements.0/@ownedElements.10/@comments.0 //@ownedElements.0/@ownedElements.10/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.10"/>
  <compilationUnits name="McCabeForTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeForTest.java" commentList="//@ownedElements.0/@ownedElements.11/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.11"/>
  <compilationUnits name="CkDitLevelOneWithParent.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitLevelOneWithParent.java" commentList="//@ownedElements.0/@ownedElements.12/@comments.0 //@ownedElements.0/@ownedElements.12/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.12"/>
  <compilationUnits name="CkNocTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocTest.java" commentList="//@ownedElements.0/@ownedElements.13/@comments.0 //@ownedElements.0/@ownedElements.13/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.13"/>
  <compilationUnits name="CkNocInterfaceTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocInterfaceTest.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.14"/>
  <compilationUnits name="McCabeTestSwitchCase.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestSwitchCase.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.15"/>
  <compilationUnits name="CkDitLevelZeroWithNoParent.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitLevelZeroWithNoParent.java" commentList="//@ownedElements.0/@ownedElements.16/@comments.0 //@ownedElements.0/@ownedElements.16/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.16"/>
  <compilationUnits name="CkDitTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitTest.java" commentList="//@ownedElements.0/@ownedElements.17/@comments.0 //@ownedElements.0/@ownedElements.17/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.17"/>
  <compilationUnits name="CkDitLevelTwoWithTwoParents.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitLevelTwoWithTwoParents.java" commentList="//@ownedElements.0/@ownedElements.18/@comments.0 //@ownedElements.0/@ownedElements.18/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.18"/>
  <compilationUnits name="McCabeExceptionsTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeExceptionsTest.java" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.19"/>
  <compilationUnits name="McCabeTestIfElse.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestIfElse.java" commentList="//@ownedElements.0/@ownedElements.20/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.20"/>
  <compilationUnits name="McCabeTestSwitchCase2.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeTestSwitchCase2.java" commentList="//@ownedElements.0/@ownedElements.21/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.21/@bodyDeclarations.1/@comments.0 //@ownedElements.0/@ownedElements.21/@comments.0 //@ownedElements.0/@ownedElements.21/@comments.1 //@ownedElements.0/@ownedElements.21/@comments.2 //@ownedElements.0/@ownedElements.21/@comments.3 //@ownedElements.0/@ownedElements.21/@comments.4 //@ownedElements.0/@ownedElements.21/@comments.5 //@ownedElements.0/@ownedElements.21/@comments.6 //@ownedElements.0/@ownedElements.21/@comments.7 //@ownedElements.0/@ownedElements.21/@comments.8" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.21"/>
  <compilationUnits name="McCabeContinueTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\McCabeContinueTest.java" commentList="//@ownedElements.0/@ownedElements.22/@bodyDeclarations.0/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.22"/>
  <compilationUnits name="CkNocChildOne.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkNocChildOne.java" commentList="//@ownedElements.0/@ownedElements.23/@comments.0 //@ownedElements.0/@ownedElements.23/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.23"/>
  <compilationUnits name="CkWmcTest.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkWmcTest.java" commentList="//@ownedElements.0/@ownedElements.24/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.0/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.0/@body/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.1/@body/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.3/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.3/@body/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.4/@body/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.6/@comments.0 //@ownedElements.0/@ownedElements.24/@bodyDeclarations.6/@body/@comments.0" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.24"/>
  <compilationUnits name="CkDitInterfaceLevelOneWithNoParent.java" originalFilePath="C:\Users\Worm\Git_Workspace\Studienarbeit\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\ScalaOclMetricToolTestclasses\src\testclasses\CkDitInterfaceLevelOneWithNoParent.java" commentList="//@ownedElements.0/@ownedElements.25/@comments.0 //@ownedElements.0/@ownedElements.25/@comments.1" package="//@ownedElements.0" types="//@ownedElements.0/@ownedElements.25"/>
</java:Model>
