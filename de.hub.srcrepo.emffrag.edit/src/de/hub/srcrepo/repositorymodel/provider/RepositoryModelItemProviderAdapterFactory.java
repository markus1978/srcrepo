/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package de.hub.srcrepo.repositorymodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.hub.srcrepo.repositorymodel.emffrag.util.RepositoryModelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RepositoryModelItemProviderAdapterFactory extends RepositoryModelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RepositoryModelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.RepositoryModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryModelItemProvider repositoryModelItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.RepositoryModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryModelAdapter() {
		if (repositoryModelItemProvider == null) {
			repositoryModelItemProvider = new RepositoryModelItemProvider(this);
		}

		return repositoryModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.Rev} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RevItemProvider revItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.Rev}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRevAdapter() {
		if (revItemProvider == null) {
			revItemProvider = new RevItemProvider(this);
		}

		return revItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.Ref} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefItemProvider refItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.Ref}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefAdapter() {
		if (refItemProvider == null) {
			refItemProvider = new RefItemProvider(this);
		}

		return refItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.Diff} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffItemProvider diffItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.Diff}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffAdapter() {
		if (diffItemProvider == null) {
			diffItemProvider = new DiffItemProvider(this);
		}

		return diffItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.ParentRelation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParentRelationItemProvider parentRelationItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.ParentRelation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParentRelationAdapter() {
		if (parentRelationItemProvider == null) {
			parentRelationItemProvider = new ParentRelationItemProvider(this);
		}

		return parentRelationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.JavaCompilationUnitRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JavaCompilationUnitRefItemProvider javaCompilationUnitRefItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.JavaCompilationUnitRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJavaCompilationUnitRefAdapter() {
		if (javaCompilationUnitRefItemProvider == null) {
			javaCompilationUnitRefItemProvider = new JavaCompilationUnitRefItemProvider(this);
		}

		return javaCompilationUnitRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.TraversalState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TraversalStateItemProvider traversalStateItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.TraversalState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTraversalStateAdapter() {
		if (traversalStateItemProvider == null) {
			traversalStateItemProvider = new TraversalStateItemProvider(this);
		}

		return traversalStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.PendingElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PendingElementItemProvider pendingElementItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.PendingElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPendingElementAdapter() {
		if (pendingElementItemProvider == null) {
			pendingElementItemProvider = new PendingElementItemProvider(this);
		}

		return pendingElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.hub.srcrepo.repositorymodel.Target} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetItemProvider targetItemProvider;

	/**
	 * This creates an adapter for a {@link de.hub.srcrepo.repositorymodel.Target}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetAdapter() {
		if (targetItemProvider == null) {
			targetItemProvider = new TargetItemProvider(this);
		}

		return targetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (repositoryModelItemProvider != null) repositoryModelItemProvider.dispose();
		if (revItemProvider != null) revItemProvider.dispose();
		if (refItemProvider != null) refItemProvider.dispose();
		if (diffItemProvider != null) diffItemProvider.dispose();
		if (parentRelationItemProvider != null) parentRelationItemProvider.dispose();
		if (javaCompilationUnitRefItemProvider != null) javaCompilationUnitRefItemProvider.dispose();
		if (traversalStateItemProvider != null) traversalStateItemProvider.dispose();
		if (pendingElementItemProvider != null) pendingElementItemProvider.dispose();
		if (targetItemProvider != null) targetItemProvider.dispose();
	}

}
